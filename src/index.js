const { Bot, Keyboard, InlineKeyboard } = require('grammy')
const utils = require('./utils/index.js')
const db = require('./config/db.json')

const bot = new Bot('8081276139:AAHRGaZOFf63LSOnJM9W22LOFt2Kw8KfCxs')


bot.command('start', async (ctx) => {
    const startKeyboard = new Keyboard()
        .text('–ù–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è')
        .text('–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ üá∑üá∫')
        .resized()

    const inlineKeyboard = new InlineKeyboard()
        .text('–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', 'free_events')
        .row()
        .text('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞')
        .row()
        .url('–°–∞–π—Ç', 'https://webstep.co.uz')
        .row()
        .switchInlineCurrent('–ö—É—Ä—Å—ã', '–∫—É—Ä—Å—ã')
        .text('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        .row()
        .text('–ö–æ–Ω—Ç–∞–∫—Ç—ã')
        .text('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')


    await ctx.reply(db.start.hello_msg, {
        reply_markup: startKeyboard
    })
    await ctx.reply(db.start.info_msg, {
        reply_markup: inlineKeyboard
    })
})

bot.on('inline_query', async (ctx) => {
    const query = ctx.inlineQuery.query;
    
    if (query === '–∫—É—Ä—Å—ã') {        
        const coursesList = [
            { text: '–í–µ–±-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', description: '–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤ –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π', callback_data: 'web', image_url: "https://webstep.co.uz/images/bot/web.png" },
            { text: 'Python', description: '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–æ–≤, –æ–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π', callback_data: 'python', image_url: "https://webstep.co.uz/images/bot/python.png" },
            { text: 'Dropshipping', description: '–°–æ–∑–¥–∞–Ω–∏–µ –æ–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω–∞, –≤—ã—Ö–æ–¥ –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏', callback_data: 'dropship', image_url: "https://webstep.co.uz/images/bot/drop.png" },
            { text: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', description: 'SMM, –∏—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏, —Ç–∞—Ä–≥–µ—Ç', callback_data: 'smm', image_url: "https://webstep.co.uz/images/bot/smm.png" },
            { text: '–õ–æ–≥–∏—Å—Ç–∏–∫–∞', description: '–ü–æ–∏—Å–∫ –≥—Ä—É–∑–æ–≤ –∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π', callback_data: 'logist', image_url: "https://webstep.co.uz/images/bot/logist.png" },
            { text: 'Scratch', description: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–µ—Ç–µ–π, —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä –∏ –∞–Ω–∏–º–∞—Ü–∏–π', callback_data: 'scratch', image_url: "https://webstep.co.uz/images/bot/scratch.png" },
        ];

        const inlineResults = coursesList.map(course => ({
            type: 'article',
            id: course.callback_data,
            title: course.text,
            description: course.description,
            thumb_url: course.image_url,
            input_message_content: {
                message_text: `${course.text}\n\n${course.description}`,
                media: {
                    type: 'photo',
                    media: course.image_url,
                    caption: course.description,
                },
            },
        }));
        
        await ctx.answerInlineQuery(inlineResults);
    }
});

bot.on('callback_query:data', async (ctx) => {
    const data = ctx.callbackQuery.data;
    if (data === 'free_events') return await utils.freeEvents(ctx)
    console.log(data);
});

bot.on('chosen_inline_result', async (ctx) => {
    console.log(123123123);
    console.log(ctx.chosenInlineResult.result_id); // –õ–æ–≤–∏–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
});

bot.start()

